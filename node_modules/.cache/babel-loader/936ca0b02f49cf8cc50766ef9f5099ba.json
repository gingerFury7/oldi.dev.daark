{"ast":null,"code":"import { types } from 'mobx-state-tree';\nconst AppType = types.model('AppType', {\n  //  id: types.identifier,\n  AppTypeIcon: types.string,\n  AppTypeName: types.string,\n  isSele: types.boolean\n}).actions(_c = self => ({\n  togle() {\n    self.isChoosen = !self.isChoosen;\n  }\n\n}));\n_c2 = AppType;\nexport const AppTypeStore = types.model('AppTypeStore', {\n  app: types.array(AppType)\n});\nexport const CalculationStore = types.model('CalculationStore', {\n  appType: types.maybe(types.array(AppType))\n});\nexport default CalculationStore;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AppType$types\\n    .model('AppType', {\\n        //  id: types.identifier,\\n        AppTypeIcon: types.string,\\n        AppTypeName: types.string,\\n        isSele: types.boolean,\\n    })\\n    .actions\");\n$RefreshReg$(_c2, \"AppType\");","map":{"version":3,"sources":["/Users/macbook/Desktop/Работа/react_test/daark/src/store/calculationStore.js"],"names":["types","AppType","model","AppTypeIcon","string","AppTypeName","isSele","boolean","actions","self","togle","isChoosen","AppTypeStore","app","array","CalculationStore","appType","maybe"],"mappings":"AAAA,SAASA,KAAT,QAAsB,iBAAtB;AAEA,MAAMC,OAAO,GAAGD,KAAK,CAChBE,KADW,CACL,SADK,EACM;AACd;AACAC,EAAAA,WAAW,EAAEH,KAAK,CAACI,MAFL;AAGdC,EAAAA,WAAW,EAAEL,KAAK,CAACI,MAHL;AAIdE,EAAAA,MAAM,EAAEN,KAAK,CAACO;AAJA,CADN,EAOXC,OAPW,MAOFC,IAAD,KAAW;AAChBC,EAAAA,KAAK,GAAG;AACJD,IAAAA,IAAI,CAACE,SAAL,GAAiB,CAACF,IAAI,CAACE,SAAvB;AACH;;AAHe,CAAX,CAPG,CAAhB;MAAMV,O;AAeN,OAAO,MAAMW,YAAY,GAAGZ,KAAK,CAACE,KAAN,CAAY,cAAZ,EAA4B;AACpDW,EAAAA,GAAG,EAAEb,KAAK,CAACc,KAAN,CAAYb,OAAZ;AAD+C,CAA5B,CAArB;AAIP,OAAO,MAAMc,gBAAgB,GAAGf,KAAK,CAACE,KAAN,CAAY,kBAAZ,EAAgC;AAC5Dc,EAAAA,OAAO,EAAEhB,KAAK,CAACiB,KAAN,CAAYjB,KAAK,CAACc,KAAN,CAAYb,OAAZ,CAAZ;AADmD,CAAhC,CAAzB;AAIP,eAAec,gBAAf","sourcesContent":["import { types } from 'mobx-state-tree';\n\nconst AppType = types\n    .model('AppType', {\n        //  id: types.identifier,\n        AppTypeIcon: types.string,\n        AppTypeName: types.string,\n        isSele: types.boolean,\n    })\n    .actions((self) => ({\n        togle() {\n            self.isChoosen = !self.isChoosen;\n        }\n    }))\n\n\n\nexport const AppTypeStore = types.model('AppTypeStore', {\n    app: types.array(AppType)\n})\n\nexport const CalculationStore = types.model('CalculationStore', {\n    appType: types.maybe(types.array(AppType)),\n})\n\nexport default CalculationStore;"]},"metadata":{},"sourceType":"module"}