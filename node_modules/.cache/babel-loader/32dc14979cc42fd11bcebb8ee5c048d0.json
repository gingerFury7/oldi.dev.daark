{"ast":null,"code":"import { types } from 'mobx-state-tree';\nconst AppType = types.model('AppType', {\n  //  id: types.identifier,\n  AppTypeIcon: types.string,\n  AppTypeName: types.string,\n  isSelected: types.boolean\n}).actions(_c = self => ({\n  togle() {\n    self.isSelected = !self.isSelected;\n  }\n\n}));\n_c2 = AppType;\nexport const AppTypeStore = types.model('AppTypeStore', {\n  app: types.array(AppType)\n});\nexport const CalculationStore = types.model('CalculationStore', {\n  appType: types.maybe(types.array(AppType))\n}).actions();\nexport default CalculationStore;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AppType$types\\n    .model('AppType', {\\n        //  id: types.identifier,\\n        AppTypeIcon: types.string,\\n        AppTypeName: types.string,\\n        isSelected: types.boolean,\\n    })\\n    .actions\");\n$RefreshReg$(_c2, \"AppType\");","map":{"version":3,"sources":["/Users/macbook/Desktop/Работа/react_test/daark/src/store/calculationStore.js"],"names":["types","AppType","model","AppTypeIcon","string","AppTypeName","isSelected","boolean","actions","self","togle","AppTypeStore","app","array","CalculationStore","appType","maybe"],"mappings":"AAAA,SAASA,KAAT,QAAsB,iBAAtB;AAEA,MAAMC,OAAO,GAAGD,KAAK,CAChBE,KADW,CACL,SADK,EACM;AACd;AACAC,EAAAA,WAAW,EAAEH,KAAK,CAACI,MAFL;AAGdC,EAAAA,WAAW,EAAEL,KAAK,CAACI,MAHL;AAIdE,EAAAA,UAAU,EAAEN,KAAK,CAACO;AAJJ,CADN,EAOXC,OAPW,MAOFC,IAAD,KAAW;AAChBC,EAAAA,KAAK,GAAG;AACJD,IAAAA,IAAI,CAACH,UAAL,GAAkB,CAACG,IAAI,CAACH,UAAxB;AACH;;AAHe,CAAX,CAPG,CAAhB;MAAML,O;AAeN,OAAO,MAAMU,YAAY,GAAGX,KAAK,CAACE,KAAN,CAAY,cAAZ,EAA4B;AACpDU,EAAAA,GAAG,EAAEZ,KAAK,CAACa,KAAN,CAAYZ,OAAZ;AAD+C,CAA5B,CAArB;AAIP,OAAO,MAAMa,gBAAgB,GAAGd,KAAK,CAACE,KAAN,CAAY,kBAAZ,EAAgC;AAC5Da,EAAAA,OAAO,EAAEf,KAAK,CAACgB,KAAN,CAAYhB,KAAK,CAACa,KAAN,CAAYZ,OAAZ,CAAZ;AADmD,CAAhC,EAG3BO,OAH2B,EAAzB;AAKP,eAAeM,gBAAf","sourcesContent":["import { types } from 'mobx-state-tree';\n\nconst AppType = types\n    .model('AppType', {\n        //  id: types.identifier,\n        AppTypeIcon: types.string,\n        AppTypeName: types.string,\n        isSelected: types.boolean,\n    })\n    .actions((self) => ({\n        togle() {\n            self.isSelected = !self.isSelected;\n        }\n    }))\n\n\n\nexport const AppTypeStore = types.model('AppTypeStore', {\n    app: types.array(AppType)\n})\n\nexport const CalculationStore = types.model('CalculationStore', {\n    appType: types.maybe(types.array(AppType)),\n})\n    .actions()\n\nexport default CalculationStore;"]},"metadata":{},"sourceType":"module"}