{"ast":null,"code":"import { types } from 'mobx-state-tree';\nconst AppType = types.model('AppType', {\n  //  id: types.identifier,\n  AppTypeIcon: types.string,\n  AppTypeName: types.string,\n  isChoosen: types.boolean\n}).actions(_c = self => ({\n  togle() {\n    self.isChoosen = !self.isChoosen;\n  }\n\n}));\n_c2 = AppType;\nexport const AppTypeStore = types.model('AppTypeStore', {\n  app: types.array(AppType)\n});\nexport const AppStore = AppTypeStore.create({\n  app: [{\n    AppTypeIcon: '/Calculation/AppType/Apple.svg',\n    AppTypeName: 'Apple',\n    isChoosen: false\n  }, {\n    AppTypeIcon: '/Calculation/AppType/Android.svg',\n    AppTypeName: 'Android',\n    isChoosen: false\n  }]\n});\nconst CalculationStore = types.model('CalculationStore', {\n  appType: types.maybe(types.array(AppType))\n});\nexport default CalculationStore;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AppType$types\\n    .model('AppType', {\\n        //  id: types.identifier,\\n        AppTypeIcon: types.string,\\n        AppTypeName: types.string,\\n        isChoosen: types.boolean,\\n    })\\n    .actions\");\n$RefreshReg$(_c2, \"AppType\");","map":{"version":3,"sources":["/Users/macbook/Desktop/Работа/react_test/daark/src/store/calculationStore.js"],"names":["types","AppType","model","AppTypeIcon","string","AppTypeName","isChoosen","boolean","actions","self","togle","AppTypeStore","app","array","AppStore","create","CalculationStore","appType","maybe"],"mappings":"AAAA,SAASA,KAAT,QAAsB,iBAAtB;AAEA,MAAMC,OAAO,GAAGD,KAAK,CAChBE,KADW,CACL,SADK,EACM;AACd;AACAC,EAAAA,WAAW,EAAEH,KAAK,CAACI,MAFL;AAGdC,EAAAA,WAAW,EAAEL,KAAK,CAACI,MAHL;AAIdE,EAAAA,SAAS,EAAEN,KAAK,CAACO;AAJH,CADN,EAOXC,OAPW,MAOFC,IAAD,KAAW;AAChBC,EAAAA,KAAK,GAAG;AACJD,IAAAA,IAAI,CAACH,SAAL,GAAiB,CAACG,IAAI,CAACH,SAAvB;AACH;;AAHe,CAAX,CAPG,CAAhB;MAAML,O;AAeN,OAAO,MAAMU,YAAY,GAAGX,KAAK,CAACE,KAAN,CAAY,cAAZ,EAA4B;AACpDU,EAAAA,GAAG,EAAEZ,KAAK,CAACa,KAAN,CAAYZ,OAAZ;AAD+C,CAA5B,CAArB;AAIP,OAAO,MAAMa,QAAQ,GAAGH,YAAY,CAACI,MAAb,CAAoB;AACxCH,EAAAA,GAAG,EAAE,CACD;AACIT,IAAAA,WAAW,EAAE,gCADjB;AAEIE,IAAAA,WAAW,EAAE,OAFjB;AAGIC,IAAAA,SAAS,EAAE;AAHf,GADC,EAMD;AACIH,IAAAA,WAAW,EAAE,kCADjB;AAEIE,IAAAA,WAAW,EAAE,SAFjB;AAGIC,IAAAA,SAAS,EAAE;AAHf,GANC;AADmC,CAApB,CAAjB;AAeP,MAAMU,gBAAgB,GAAGhB,KAAK,CAACE,KAAN,CAAY,kBAAZ,EAAgC;AACrDe,EAAAA,OAAO,EAAEjB,KAAK,CAACkB,KAAN,CAAYlB,KAAK,CAACa,KAAN,CAAYZ,OAAZ,CAAZ;AAD4C,CAAhC,CAAzB;AAIA,eAAee,gBAAf","sourcesContent":["import { types } from 'mobx-state-tree';\n\nconst AppType = types\n    .model('AppType', {\n        //  id: types.identifier,\n        AppTypeIcon: types.string,\n        AppTypeName: types.string,\n        isChoosen: types.boolean,\n    })\n    .actions((self) => ({\n        togle() {\n            self.isChoosen = !self.isChoosen;\n        }\n    }))\n\n\n\nexport const AppTypeStore = types.model('AppTypeStore', {\n    app: types.array(AppType)\n})\n\nexport const AppStore = AppTypeStore.create({\n    app: [\n        {\n            AppTypeIcon: '/Calculation/AppType/Apple.svg',\n            AppTypeName: 'Apple',\n            isChoosen: false,\n        },\n        {\n            AppTypeIcon: '/Calculation/AppType/Android.svg',\n            AppTypeName: 'Android',\n            isChoosen: false,\n        }\n    ]\n})\n\nconst CalculationStore = types.model('CalculationStore', {\n    appType: types.maybe(types.array(AppType)),\n})\n\nexport default CalculationStore;"]},"metadata":{},"sourceType":"module"}